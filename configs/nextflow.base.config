params {
	root = "/filepath/to/JASEN" //edit
	resfinderDb = "${params.root}/assets/resfinder_db"
	pointfinderDb = "${params.root}/assets/pointfinder_db"
	virulencefinderDb = "${params.root}/assets/virulencefinder_db"
	mlstBlastDb = "${root}/assets/mlst_db/blast"
	//krakenDb = "/filepath/to/krakenDb" //edit if useKraken = true
	workDir = "/filepath/to/workdir" //edit
	publishDir = ""
	publishDirMode = "copy"
	publishDirOverwrite = true
	outdir = "/filepath/to/outdir" //edit
	containerDir = "${root}/container"
	args = ""
	prefix = ""
	useKraken = false
	useSkesa = false // To use spades set useSkesa = false
}

process {
	withName: ariba_run {
		container = "${params.containerDir}/ariba.sif"
		memory = '32 GB'
		publishDir = "${params.outdir}/ariba"
	}
	withName: ariba_summary {
		container = "${params.containerDir}/ariba.sif"
		publishDir = "${params.outdir}/ariba"
	}
	withName: 'bwa_mem|bwa_index' {
		container = "${params.containerDir}/bwa.sif"
		cpus = 16
		memory = '32 GB'
		time = '1h'
		publishDir = "${params.outdir}/bwa"
		ext.args = "-M"
	}
	withName: 'samtools_sort|samtools_index' {
		container = "${params.containerDir}/samtools.sif"
		publishDir = "${params.outdir}/samtools"
	}
	withName: spades {
		container = "${params.containerDir}/spades.sif"
		cpus = 16
		memory = '64 GB'
		time = '2h'
		publishDir = "${params.outdir}/spades"
		ext.args = "--only-assembler"
	}
	withName: skesa {
		container = "${params.containerDir}/skesa.sif"
		cpus = 16
		memory = '64 GB'
		time = '2h'
		publishDir = "${params.outdir}/skesa"
		ext.args = "--cores 4 --memory 48"
	}
	withName: quast {
		container = "${params.containerDir}/quast.sif"
		publishDir = "${params.outdir}/quast"
	}
	withName: mlst {
		container = "${params.containerDir}/mlst.sif"
		publishDir = "${params.outdir}/mlst"
	}
	withName: kraken {
		cpus = 16
		memory = '48 GB'
		time = '2h'
		container = "${params.containerDir}/kraken2.sif"
		publishDir = "${params.outdir}/kraken"
	}
	withName: bracken {
		cpus = 4
		memory = '12 GB'
		time = '2h'
		container = "${params.containerDir}/bracken.sif"
		publishDir = "${params.outdir}/kraken"
	}
	withName: resfinder {
		container = "${params.containerDir}/resfinder.sif"
		publishDir = "${params.outdir}/resfinder"
	}
	withName: virulencefinder {
		container = "${params.containerDir}/virulencefinder.sif"
		publishDir = "${params.outdir}/virulencefinder"
	}
	withName: freebayes {
		container = "${params.containerDir}/freebayes.sif"
		publishDir = "${params.outdir}/freebayes"
	}
	withName: 'chewbbaca_allelecall|chewbbaca_split_results|chewbbaca_split_missing_loci|chewbbaca_create_batch_list' {
		container = "${params.containerDir}/chewbbaca.sif"
		cpus = 7
		publishDir = "${params.outdir}/chewbbaca"
	}
	withName: ariba_summary_to_json {
		container = "${params.containerDir}/perl_json_3A4.02.sif"
		publishDir = "${params.outdir}/ariba"
	}
	withName: post_align_qc {
		container = "${params.containerDir}/postAlignQc.sif"
		publishDir = "${params.outdir}/postalignqc"
	}
	withName: export_to_cdm {
		publishDir = "/fs1/results_dev/cron/qc"
	}
	withName: create_analysis_result {
		container = "${params.containerDir}/pythonScripts.sif"
		publishDir = "${params.outdir}/analysis_result"
	}
	withName: save_analysis_metadata {
		publishDir = "${params.outdir}/analysis_metadata"
	}
	withName: 'mask_polymorph_assembly' {
		publishDir = "${params.outdir}/misc"
	}
}

singularity {
	//runOptions = '--bind /local/' // Bind/mount directories to image //Remove "//" and edit directories you wish to bind
	//autoMounts = true
	enabled = true

	env.NXF_SINGULARITY_LOCALCACHEDIR="${params.workDir}"
	env.NXF_SINGULARITY_CACHEDIR="${params.workDir}"
	env.NXF_SINGULARITY_TMPDIR="${params.workDir}"

	env.SINGULARITY_LOCALCACHEDIR="${params.workDir}"
	env.SINGULARITY_CACHEDIR="${params.workDir}"
	env.SINGULARITY_TMPDIR="${params.workDir}"
	env.SINGULARITY_ROOTFS="${params.workDir}"
}

profiles {
	staphylococcus_aureus {
		params.species = "staphylococcus aureus"
		params.genomeReference = "${params.root}/assets/genomes/staphylococcus_aureus/NC_002951.2.fasta"
		params.aribaReference = "${params.root}/assets/card/nucleotide_fasta_protein_homolog_model.fasta"
		params.cgmlstDb = "${params.root}/assets/cgmlst/staphylococcus_aureus/alleles_rereffed"
		params.cgmlstSchema = "${params.root}/assets/cgmlst/staphylococcus_aureus/bed/NC_002951.2.bed"
		params.trainingFile = "${params.root}/assets/prodigal_training_files/Staphylococcus_aureus.trn"
		params.useVirulenceDbs = ['s.aureus_hostimm', 's.aureus_exoenzyme', 's.aureus_toxin']
	}

	escherichia_coli {
		params.species = 'escherichia coli'
		params.genomeReference = "${params.root}/assets/genomes/escherichia_coli/NC_000913.3.fasta"
		params.aribaReference = "${params.root}/assets/card/nucleotide_fasta_protein_homolog_model.fasta"
		params.cgmlstDb = "${params.root}/assets/cgmlst/escherichia_coli/alleles_rereffed"
		params.cgmlstSchema = "${params.root}/assets/cgmlst/escherichia_coli/bed/NC_000913.3.bed"
		params.trainingFile = "${params.root}/assets/prodigal_training_files/Escherichia_coli.trn"
		params.useVirulenceDbs = ['virulence_ecoli']
	}

	klebsiella_pneumoniae {
		params.species = 'klebsiella pneumoniae'
		params.genomeReference = "${params.root}/assets/genomes/klebsiella_pneumoniae/NC_016845.1.fasta"
		params.aribaReference = "${params.root}/assets/card/nucleotide_fasta_protein_homolog_model.fasta"
		params.cgmlstDb = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/alleles"
		params.cgmlstSchema = "${params.root}/assets/cgmlst/klebsiella_pneumoniae/bed"
		params.trainingFile = "${params.root}/assets/prodigal_training_files/Klebsiella_pneumoniae.trn"
	}
}
